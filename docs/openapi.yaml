openapi: 3.0.3
info:
  title: ForUsBots API
  version: 2.3.0
servers:
  - url: http://localhost:10000
paths:
  /forusbot/health:
    get:
      summary: Health check
      responses:
        '200': { description: OK }

  /forusbot/status:
    get:
      summary: Global status snapshot
      description: |
        Si flags.statusPublic = false, requiere header x-auth-token.
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: false
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /forusbot/jobs:
    get:
      summary: List jobs (queued/running/finished)
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
        - in: query
          name: state
          schema: { type: string, enum: [queued, running, succeeded, failed, canceled] }
        - in: query
          name: botId
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 500 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [ok, total, limit, offset, jobs]
                properties:
                  ok: { type: boolean }
                  total: { type: integer }
                  limit: { type: integer }
                  offset: { type: integer }
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '401': { description: Unauthorized }

  /forusbot/jobs/{id}:
    get:
      summary: Get job by id
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401': { description: Unauthorized }
        '404': { description: Not Found }
    delete:
      summary: Cancel queued job
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: Cancelled / Not Cancelled }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
        '409': { description: Conflict (running) }

  /forusbot/locks:
    get:
      summary: View login/TOTP locks
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /forusbot/settings:
    get:
      summary: Get runtime settings
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
    patch:
      summary: Patch runtime settings
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxConcurrency: { type: integer, minimum: 1 }
                flags:
                  type: object
                  properties:
                    statusPublic: { type: boolean }
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }

  /forusbot/metrics:
    get:
      summary: Runtime metrics
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /forusbot/version:
    get:
      summary: Package version
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  
  /forusbot/search-participants:
    post:
      summary: Search participants
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                criteria:
                  type: object
                  properties:
                    companyName: { type: string, nullable: true }
                    fullName:    { type: string, nullable: true }
                    email:       { type: string, nullable: true }
                    ssn:         { type: string, nullable: true, description: "last 4" }
                    phone:       { type: string, nullable: true }
                    participantId:{ type: string, nullable: true }
                options:
                  type: object
                  properties:
                    fetchAllPages:    { type: boolean }
                    pageLimit:        { type: integer, minimum: 1 }
                    maxRows:          { type: integer, minimum: 1 }
                    evidenceOnSuccess:{ type: boolean }
                    timeoutMs:        { type: integer, minimum: 1000 }
      responses:
        '202': { description: Accepted (returns jobId) }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '500': { description: Internal Server Error }

  /health:
    get:
      summary: Health check (plain)
      responses:
        '200': { description: OK }

  /forusbot/whoami:
    get:
      summary: Identity of current token
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }

  /forusbot/sandbox/vault-file-upload:
    post:
      summary: Dry-run validator for upload headers/body
      requestBody:
        required: false
        content:
          application/octet-stream:
            schema: { type: string, format: binary }
          application/pdf:
            schema: { type: string, format: binary }
      parameters:
        - in: header
          name: x-filename
          schema: { type: string }
          required: true
        - in: header
          name: x-meta
          schema: { type: string }
          required: true
      responses:
        '200': { description: OK }
        '400': { description: Bad Request }
        '422': { description: Unprocessable Entity }

  /forusbot/scrape-participant:
    post:
      summary: Enqueue participant scraping job
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participantId: { type: string }
                return: { type: string, enum: [data, html, text, both] }
                strict: { type: boolean }
                includeScreens: { type: boolean }
                timeoutMs: { type: integer, minimum: 5000 }
                modules:
                  type: array
                  items:
                    oneOf:
                      - { type: string }
                      - type: object
                        properties:
                          key: { type: string }
                          fields:
                            type: array
                            items: { type: string }
      responses:
        '202': { description: Accepted (returns jobId) }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '422': { description: Validation failed }
        '500': { description: Internal Server Error }

  /forusbot/mfa-reset:
    post:
      summary: Enqueue MFA reset for participant
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participantId: { type: string }
              required: [participantId]
      responses:
        '202': { description: Accepted (returns jobId) }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '500': { description: Internal Server Error }

  /forusbot/openapi:
    get:
      summary: Serve this OpenAPI (YAML)
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
      responses:
        '200':
          description: OK
          content:
            text/yaml: {}
        '401': { description: Unauthorized }

  /forusbot/vault-file-upload:
    post:
      summary: Accept a new upload job (202 Accepted)
      parameters:
        - in: header
          name: x-auth-token
          schema: { type: string }
          required: true
        - in: header
          name: x-filename
          schema: { type: string }
          required: true
        - in: header
          name: x-meta
          schema: { type: string }
          required: true
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema: { type: string, format: binary }
          application/pdf:
            schema: { type: string, format: binary }
      responses:
        '202': { description: Accepted (returns jobId and estimate) }
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '422': { description: Unprocessable Entity }
        '500': { description: Internal Server Error }

components:
  schemas:
    ResultEnvelope:
      type: object
      required: [ok, code, data, warnings, errors]
      properties:
        ok: { type: boolean }
        code: { type: string, example: SEARCH_OK }
        message: { type: string, nullable: true }
        data:
          type: object
          nullable: true
          description: Payload normalizado por bot
        warnings:
          type: array
          items: {}
        errors:
          type: array
          items: {}

    StageEntry:
      type: object
      required: [name, startedAt, endedAt, durationMs, status]
      properties:
        name: { type: string }
        startedAt: { type: string, format: date-time }
        endedAt: { type: string, format: date-time }
        durationMs: { type: integer, minimum: 0 }
        status: { type: string, enum: [succeed, fail] }
        meta: { type: object, nullable: true }
        error:
          type: object
          nullable: true
          properties:
            name: { type: string }
            message: { type: string }
            stack: { type: string }

    Job:
      type: object
      required:
        [ ok, jobId, botId, state, acceptedAt, result, meta, stages ]
      properties:
        ok:
          type: boolean
          description: Siempre true para el wrapper de GET /jobs/:id; útil si se reutiliza en otras respuestas
          example: true
        jobId: { type: string, format: uuid }
        botId: { type: string }
        state: { type: string, enum: [queued, running, succeeded, failed, canceled] }
        acceptedAt: { type: string, format: date-time }
        startedAt: { type: string, format: date-time, nullable: true }
        finishedAt: { type: string, format: date-time, nullable: true }
        createdBy:
          type: object
          nullable: true
          properties:
            name: { type: string, nullable: true }
            role: { type: string, nullable: true }
            at:   { type: string, format: date-time, nullable: true }
        meta:
          type: object
          description: Meta sanitizada (sin selectors)
        result:
          $ref: '#/components/schemas/ResultEnvelope'
        error:
          type: string
          nullable: true
        stages:
          type: array
          description: Historial completo de stages del job
          items:
            $ref: '#/components/schemas/StageEntry'
        stagesSummaryMsByName:
          type: object
          additionalProperties: { type: integer }
          description: (Opcional) Suma de ms por nombre de stage
        waitingSeconds: { type: integer, nullable: true }
        position: { type: integer, nullable: true }
        elapsedSeconds: { type: integer, nullable: true }
        stage: { type: string, nullable: true }
        stageSince: { type: string, format: date-time, nullable: true }
        stageSeconds: { type: integer, nullable: true }
        stageMeta: { type: object, nullable: true }
        totalSeconds: { type: integer, nullable: true }
